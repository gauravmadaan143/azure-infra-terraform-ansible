trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  terraformVersion: '1.6.6'
  terraform_folder: 'terraform'
  ansible_folder: 'ansible'

stages:

# ─────────── Stage 1: Install Terraform CLI ───────────
- stage: InstallTerraform
  displayName: "Install Terraform CLI"
  jobs:
    - job: InstallTerraform
      displayName: "Install Terraform"
      steps:
        - checkout: self
        - bash: |
            set -e

            echo "Installing Terraform version $(terraformVersion)..."
            rm -rf terraform terraform.zip

            # Download
            curl -sSLo terraform.zip \
              https://releases.hashicorp.com/terraform/$(terraformVersion)/terraform_$(terraformVersion)_linux_amd64.zip

            # Validate ZIP before unzip
            if ! unzip -t terraform.zip >/dev/null 2>&1; then
              echo "❌ Invalid ZIP file downloaded!"
              head -n50 terraform.zip
              exit 1
            fi

            # Extract and install locally
            unzip -o terraform.zip
            chmod +x terraform
            mkdir -p $HOME/bin
            mv terraform $HOME/bin/
            echo "##vso[task.prependpath]$HOME/bin"

            echo "✅ Terraform installed:"
            terraform -version
          displayName: "Install Terraform CLI with Validation"

# ─────────── Stage 2: Terraform Init ───────────
- stage: TerraformInit
  displayName: "Terraform Init"
  dependsOn: InstallTerraform
  jobs:
    - job: Init
      displayName: "Terraform Init"
      steps:
        - bash: |
            set -e
            cd $(terraform_folder)
            terraform init
          displayName: "Run terraform init"

# ─────────── Stage 3: Terraform Plan ───────────
- stage: TerraformPlan
  displayName: "Terraform Plan"
  dependsOn: TerraformInit
  jobs:
    - job: Plan
      displayName: "Terraform Plan"
      steps:
        - bash: |
            set -e
            cd $(terraform_folder)
            terraform plan \
              -var="location=$(location)" \
              -var="resource_group_name=$(resource_group)" \
              -var="vm_name=$(vm_name)" \
              -var="ssh_public_key=$(ssh_public_key)"
          displayName: "Run terraform plan"

# ─────────── Stage 4: Terraform Apply ───────────
- stage: TerraformApply
  displayName: "Terraform Apply"
  dependsOn: TerraformPlan
  condition: succeeded()
  jobs:
    - job: Apply
      displayName: "Terraform Apply"
      steps:
        - bash: |
            set -e
            cd $(terraform_folder)
            terraform apply -auto-approve \
              -var="location=$(location)" \
              -var="resource_group_name=$(resource_group)" \
              -var="vm_name=$(vm_name)" \
              -var="ssh_public_key=$(ssh_public_key)"
          displayName: "Run terraform apply"

# ─────────── Stage 5: Configure NGINX via Ansible ───────────
- stage: ConfigureNginx
  displayName: "Configure NGINX via Ansible"
  dependsOn: TerraformApply
  condition: succeeded()
  jobs:
    - job: Ansible
      displayName: "Run Ansible Playbook"
      steps:
        - bash: |
            set -e
            sudo apt-get update
            sudo apt-get install -y ansible
            ansible --version
            cd $(ansible_folder)
            ansible-playbook -i inventory site.yml
          displayName: "Install Ansible & Run Playbook"

trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: Terraform-SP-Creds   # Azure SP credentials
- name: terraformVersion
  value: '1.6.6'
- name: terraform_folder
  value: 'terraform'
- name: ansible_folder
  value: 'ansible'
- name: location
  value: 'westeurope'
- name: resource_group_name
  value: 'demo-rg'
- name: vm_name
  value: 'demo-vm'
- name: my_ip_address
  value: '89.64.12.157'

jobs:
- job: DeployInfra
  displayName: "Terraform + Ansible Deployment"
  steps:
    - checkout: self

    - task: TerraformInstaller@1
      displayName: "Install Terraform"
      inputs:
        terraformVersion: "$(terraformVersion)"

    - task: Bash@3
      displayName: "Terraform Init"
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
      inputs:
        targetType: inline
        script: |
          cd $(terraform_folder)
          terraform init

    - task: Bash@3
      displayName: "Terraform Apply"
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
      inputs:
        targetType: inline
        script: |
          cd $(terraform_folder)
          terraform apply -auto-approve \
            -var="location=$(location)" \
            -var="resource_group_name=$(resource_group_name)" \
            -var="vm_name=$(vm_name)" \
            -var="ssh_public_key=$(ssh_public_key)" \
            -var="my_ip_address=$(my_ip_address)" \
            -var="client_id=$(ARM_CLIENT_ID)" \
            -var="client_secret=$(ARM_CLIENT_SECRET)" \
            -var="subscription_id=$(ARM_SUBSCRIPTION_ID)" \
            -var="tenant_id=$(ARM_TENANT_ID)"
    - task: Bash@3
      displayName: "Prepare dynamic inventory"
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
      inputs:
        targetType: 'inline'
        script: |
          cd $(Build.SourcesDirectory)/$(terraform_folder)

          VM_PUBLIC_IP=$(terraform output -raw vm_public_ip)
          echo "Public IP: $VM_PUBLIC_IP"

          mkdir -p $(Build.SourcesDirectory)/$(ansible_folder)
          INVENTORY_FILE="$(Build.SourcesDirectory)/$(ansible_folder)/inventory"

          echo "[linux_servers]" > $INVENTORY_FILE
          echo "demo-vm ansible_host=$VM_PUBLIC_IP ansible_user=azureuser ansible_ssh_private_key_file=~/.ssh/id_rsa" >> $INVENTORY_FILE

          echo "Generated Ansible inventory:"
          cat $INVENTORY_FILE

          echo "[defaults]" > $(Build.SourcesDirectory)/$(ansible_folder)/ansible.cfg
          echo "host_key_checking = False" >> $(Build.SourcesDirectory)/$(ansible_folder)/ansible.cfg

    - task: Bash@3
      displayName: "Setup SSH private key for Ansible"
      env:
        SSH_PRIVATE_KEY: $(SSH_PRIVATE_KEY)
      inputs:
        targetType: 'inline'
        script: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ls -l ~/.ssh/id_rsa

    - task: Bash@3
      displayName: "Install Ansible"
      inputs:
        targetType: 'inline'
        script: |
          sudo apt-get update
          sudo apt-get install -y ansible
          ansible --version

    - task: Bash@3
      displayName: "Run Ansible Playbook"
      inputs:
        targetType: 'inline'
        script: |
          cd $(Build.SourcesDirectory)/$(ansible_folder)
          ansible-playbook -i inventory playbook.yml
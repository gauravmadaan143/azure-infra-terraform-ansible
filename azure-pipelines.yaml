trigger:
  branches:
    include:
      - main

variables:
  resource_group: "demo-rg"
  vm_name: "demo-vm"
  location: "westeurope"
  ssh_public_key: "$(SSH_PUBLIC_KEY)"  # Set this securely in pipeline variables

stages:
  - stage: Terraform
    displayName: "Terraform Deployment"
    jobs:
      - job: TerraformInitPlanApply
        displayName: "Run Terraform Steps"
        pool:
          vmImage: ubuntu-latest
        steps:
          - checkout: self

          - script: |
              sudo apt-get update
              sudo apt-get install -y unzip wget curl
              wget https://releases.hashicorp.com/terraform/1.6.6/terraform_1.6.6_linux_amd64.zip -O terraform.zip
              unzip terraform.zip
              sudo mv terraform /usr/local/bin/
              terraform -version
            displayName: "Install Terraform CLI"

          - script: |
              cd terraform
              terraform init
            displayName: "Terraform Init"

          - script: |
              cd terraform
              terraform plan \
                -var="location=$(location)" \
                -var="resource_group_name=$(resource_group)" \
                -var="vm_name=$(vm_name)" \
                -var="ssh_public_key=$(ssh_public_key)"
            displayName: "Terraform Plan"

          - script: |
              cd terraform
              terraform apply -auto-approve \
                -var="location=$(location)" \
                -var="resource_group_name=$(resource_group)" \
                -var="vm_name=$(vm_name)" \
                -var="ssh_public_key=$(ssh_public_key)"
            displayName: "Terraform Apply"

  - stage: Ansible
    displayName: "Run Ansible"
    dependsOn: Terraform
    jobs:
      - job: RunAnsible
        displayName: "Configure VM via Ansible"
        pool:
          vmImage: ubuntu-latest
        steps:
          - checkout: self

          - script: |
              sudo apt-get update
              sudo apt-get install -y ansible jq sshpass

              cd terraform
              VM_IP=$(terraform output -raw vm_public_ip)
              echo "Provisioned VM IP: $VM_IP"

              cd ..
              ansible-playbook -i "$VM_IP," ansible/playbook.yml \
                --user azureuser \
                --private-key ~/.ssh/id_rsa \
                --ssh-extra-args="-o StrictHostKeyChecking=no"
            displayName: "Run Ansible Playbook"

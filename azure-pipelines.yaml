trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  terraformVersion: '1.6.6'
  terraform_folder: 'terraform'
  ansible_folder: 'ansible'
  location: 'westeurope'
  resource_group: 'demo-rg'
  vm_name: 'demo-vm'
<<<<<<< HEAD
  ssh_public_key: 'ssh-rsa AAAAB3Nza...your_key... gauravmadaan143@gmail.com'
=======
  ssh_public_key: 'ssh-rsa AAAAB3...REDACTED...ho6Q== gauravmadaan143@gmail.com'
>>>>>>> f8e72e61920a16bef7dfff781c352c6b9d4f6a02
  my_ip_address: '89.64.12.157/32'

jobs:
- job: DeployInfra
  displayName: "Terraform + Ansible Deployment"
  steps:
    - checkout: self

<<<<<<< HEAD
    # ‚úÖ Install Terraform CLI
=======
    # ‚úÖ Install Terraform
>>>>>>> f8e72e61920a16bef7dfff781c352c6b9d4f6a02
    - task: TerraformInstaller@1
      displayName: "Install Terraform"
      inputs:
        terraformVersion: "$(terraformVersion)"

<<<<<<< HEAD
    # ‚úÖ Export Service Principal credentials to pipeline variables
    - task: AzureCLI@2
      displayName: "Set ARM_* env vars from Service Connection"
      inputs:
        azureSubscription: 'terraform-spn'  # ‚¨ÖÔ∏è Replace with your actual service connection name
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$servicePrincipalId"
          echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET]$servicePrincipalKey"
          echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$subscriptionId"
          echo "##vso[task.setvariable variable=ARM_TENANT_ID]$tenantId"

    # ‚úÖ Terraform Init using Bash and SP creds
    - task: Bash@3
=======
    # ‚úÖ Terraform Init (inside Azure context)
    - task: AzureCLI@2
>>>>>>> f8e72e61920a16bef7dfff781c352c6b9d4f6a02
      displayName: "Terraform Init"
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
      inputs:
        azureSubscription: 'terraform-spn'  # üîÅ Replace with your real service connection name
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: $(Build.SourcesDirectory)/$(terraform_folder)
        inlineScript: |
          terraform init

    # ‚úÖ Terraform Plan (Azure context)
    - task: AzureCLI@2
      displayName: "Terraform Plan"
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
      inputs:
        azureSubscription: 'terraform-spn'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: $(Build.SourcesDirectory)/$(terraform_folder)
        inlineScript: |
          terraform plan \
            -var="location=$(location)" \
            -var="resource_group_name=$(resource_group)" \
            -var="vm_name=$(vm_name)" \
            -var="ssh_public_key=$(ssh_public_key)" \
            -var="my_ip_address=$(my_ip_address)"

    # ‚úÖ Terraform Apply (Azure context)
    - task: AzureCLI@2
      displayName: "Terraform Apply"
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
      inputs:
        azureSubscription: 'terraform-spn'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: $(Build.SourcesDirectory)/$(terraform_folder)
        inlineScript: |
          terraform apply -auto-approve \
            -var="location=$(location)" \
            -var="resource_group_name=$(resource_group)" \
            -var="vm_name=$(vm_name)" \
            -var="ssh_public_key=$(ssh_public_key)" \
            -var="my_ip_address=$(my_ip_address)"

<<<<<<< HEAD
    # ‚úÖ Ansible Stage (optional)
=======
    # ‚úÖ Install and Run Ansible
>>>>>>> f8e72e61920a16bef7dfff781c352c6b9d4f6a02
    - task: Bash@3
      displayName: "Install & Run Ansible"
      inputs:
        targetType: inline
        script: |
          sudo apt-get update
          sudo apt-get install -y ansible
          cd $(Build.SourcesDirectory)/$(ansible_folder)
          ansible-playbook -i inventory playbook.yaml


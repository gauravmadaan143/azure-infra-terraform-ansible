# Trigger pipeline on pushes to the main branch
trigger:
  branches:
    include:
      - main

# Use Ubuntu image for the pipeline agent
pool:
  vmImage: 'ubuntu-latest'

# Define global variables
variables:
  - group: Terraform-SP-Creds   # SP creds from Azure DevOps variable group
  - name: terraformVersion
    value: '1.6.6'
  - name: terraform_folder
    value: 'terraform'
  - name: ansible_folder
    value: 'ansible'
  - name: location
    value: 'westeurope'
  - name: resource_group_name
    value: 'demo-rg'
  - name: vm_name
    value: 'demo-vm'
  - name: my_ip_address
    value: '89.64.12.157'       # Your public IP to allow SSH

jobs:
- job: DeployInfra
  displayName: "Terraform + Ansible Deployment"
  steps:

    # Checkout code from repo
    - checkout: self

    # Install specific Terraform version
    - task: TerraformInstaller@1
      displayName: "Install Terraform"
      inputs:
        terraformVersion: "$(terraformVersion)"

    # Terraform init with SP authentication
    - task: Bash@3
      displayName: "Terraform Init"
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
      inputs:
        targetType: inline
        script: |
          cd $(terraform_folder)
          terraform init

    # Terraform apply to provision Azure resources including VM
    - task: Bash@3
      displayName: "Terraform Apply"
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
      inputs:
        targetType: inline
        script: |
          cd $(terraform_folder)
          terraform apply -auto-approve \
            -var="location=$(location)" \
            -var="resource_group_name=$(resource_group_name)" \
            -var="vm_name=$(vm_name)" \
            -var="ssh_public_key=$(ssh_public_key)" \
            -var="my_ip_address=$(my_ip_address)" \
            -var="client_id=$(ARM_CLIENT_ID)" \
            -var="client_secret=$(ARM_CLIENT_SECRET)" \
            -var="subscription_id=$(ARM_SUBSCRIPTION_ID)" \
            -var="tenant_id=$(ARM_TENANT_ID)"

    # Create dynamic inventory file and ansible.cfg for the VM
    - task: Bash@3
      displayName: "Prepare Ansible Inventory"
      inputs:
        targetType: 'inline'
        script: |
          cd $(Build.SourcesDirectory)/$(terraform_folder)

          VM_PUBLIC_IP=$(terraform output -raw vm_public_ip)
          echo "Public IP: $VM_PUBLIC_IP"

          mkdir -p $(Build.SourcesDirectory)/$(ansible_folder)
          INVENTORY_FILE="$(Build.SourcesDirectory)/$(ansible_folder)/inventory"

          echo "[linux_servers]" > $INVENTORY_FILE
          echo "demo-vm ansible_host=$VM_PUBLIC_IP ansible_user=azureuser ansible_ssh_private_key_file=~/.ssh/id_rsa" >> $INVENTORY_FILE

          # Disable host key checking for Ansible to avoid manual confirmation prompts
          echo "[defaults]" > $(Build.SourcesDirectory)/$(ansible_folder)/ansible.cfg
          echo "host_key_checking = False" >> $(Build.SourcesDirectory)/$(ansible_folder)/ansible.cfg

    # Download the private key securely from Azure DevOps library (Secure Files)
    - task: DownloadSecureFile@1
      name: downloadKey
      displayName: "Download SSH Private Key"
      inputs:
        secureFile: 'id_rsa_azure'

    # Move the private key into ~/.ssh with correct permissions
    - task: Bash@3
      displayName: 'Set up SSH Private Key'
      inputs:
        targetType: 'inline'
        script: |
          mkdir -p ~/.ssh
          cp $(downloadKey.secureFilePath) ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

    # Optional: Debug inventory and SSH key presence
    - task: Bash@3
      displayName: 'Debug Inventory & SSH'
      inputs:
        targetType: 'inline'
        script: |
          ls -l ~/.ssh
          ls -l $(Build.SourcesDirectory)/$(ansible_folder)
          cat $(Build.SourcesDirectory)/$(ansible_folder)/inventory

    # Run Ansible using Docker (no Ansible installation needed on the agent)
    - task: Bash@3
      displayName: 'Run Ansible Playbook inside Docker (Public Image)'
      inputs:
        targetType: 'inline'
        script: |
          cd $(Build.SourcesDirectory)/$(ansible_folder)
          docker run --rm \
            -v ~/.ssh:/root/.ssh:ro \
            -v "$(pwd)":/runner/project \
            -w /runner/project \
            cytopia/ansible:latest \
            ansible-playbook -i inventory playbook.yml
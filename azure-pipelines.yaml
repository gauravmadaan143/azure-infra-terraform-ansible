trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  terraformVersion: '1.6.6'
  resource_group: 'demo-rg'
  vm_name: 'demo-vm'
  location: 'westeurope'
  terraform_folder: 'terraform'
  ansible_folder: 'ansible'
  ssh_public_key: 'ssh-rsa AAAAB3...your_actual_key_here...'

stages:

# ─────────── Stage 1: Install Terraform CLI ───────────
- stage: InstallTerraform
  displayName: "Install Terraform"
  jobs:
    - job: Install
      steps:
        - checkout: self
        - task: Bash@3
          displayName: "Install Terraform"
          inputs:
            targetType: 'inline'
            script: |
              echo "Cleaning old terraform binary/directory if exists..."
              if [ -d "/usr/local/bin/terraform" ]; then
                sudo rm -rf /usr/local/bin/terraform
              elif [ -f "/usr/local/bin/terraform" ]; then
                sudo rm -f /usr/local/bin/terraform
              fi
              echo "Downloading Terraform version $(terraformVersion)..."
              curl -sLo terraform.zip https://releases.hashicorp.com/terraform/$(terraformVersion)/terraform_$(terraformVersion)_linux_amd64.zip
              echo "Unzipping Terraform..."
              unzip terraform.zip
              echo "Moving terraform binary to /usr/local/bin/"
              sudo mv terraform /usr/local/bin/
              terraform -version

# ─────────── Stage 2: Terraform Init ───────────
- stage: Init
  displayName: "Terraform Init"
  dependsOn: InstallTerraform
  jobs:
    - job: InitJob
      steps:
        - checkout: self
        - task: Bash@3
          displayName: "Terraform Init"
          inputs:
            targetType: 'inline'
            script: |
              export PATH=$PATH:/usr/local/bin
              cd $(terraform_folder)
              terraform init

# ─────────── Stage 3: Terraform Plan ───────────
- stage: Plan
  displayName: "Terraform Plan"
  dependsOn: Init
  jobs:
    - job: PlanJob
      steps:
        - checkout: self
        - task: Bash@3
          displayName: "Terraform Plan"
          inputs:
            targetType: 'inline'
            script: |
              export PATH=$PATH:/usr/local/bin
              cd $(terraform_folder)
              terraform plan \
                -var="location=$(location)" \
                -var="resource_group_name=$(resource_group)" \
                -var="vm_name=$(vm_name)" \
                -var="ssh_public_key=$(ssh_public_key)"

# ─────────── Stage 4: Terraform Apply ───────────
- stage: Apply
  displayName: "Terraform Apply"
  dependsOn: Plan
  condition: succeeded()
  jobs:
    - job: ApplyJob
      steps:
        - checkout: self
        - task: Bash@3
          displayName: "Terraform Apply"
          inputs:
            targetType: 'inline'
            script: |
              export PATH=$PATH:/usr/local/bin
              cd $(terraform_folder)
              terraform apply \
                -var="location=$(location)" \
                -var="resource_group_name=$(resource_group)" \
                -var="vm_name=$(vm_name)" \
                -var="ssh_public_key=$(ssh_public_key)" \
                -auto-approve

# ─────────── Stage 5: Ansible NGINX Setup ───────────
- stage: ConfigureNginx
  displayName: "Configure NGINX via Ansible"
  dependsOn: Apply
  condition: succeeded()
  jobs:
    - job: AnsibleJob
      displayName: "Run Ansible NGINX Setup"
      steps:
        - checkout: self
        - task: Bash@3
          displayName: "Install Ansible"
          inputs:
            targetType: 'inline'
            script: |
              sudo apt-get update
              sudo apt-get install -y ansible
              ansible --version

        - task: Bash@3
          displayName: "Run NGINX Playbook"
          inputs:
            targetType: 'inline'
            script: |
              cd $(ansible_folder)
              ansible-playbook -i inventory site.yml

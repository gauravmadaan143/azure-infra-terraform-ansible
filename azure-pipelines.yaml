trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  terraformVersion: '1.6.6'
  terraform_folder: 'terraform'
  ansible_folder: 'ansible'
  resource_group: 'demo-rg'
  vm_name: 'demo-vm'
  location: 'westeurope'
  ssh_public_key: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDSgIiTUa...your_key_here...'

stages:

# 1. Install Terraform CLI Locally
- stage: InstallTerraform
  displayName: "Install Terraform CLI"
  jobs:
    - job: InstallTerraform
      displayName: "Install Terraform"
      steps:
        - checkout: self
        - bash: |
            set -e
            echo "Downloading Terraform $(terraformVersion)..."
            rm -rf terraform terraform.zip
            curl -sSLo terraform.zip https://releases.hashicorp.com/terraform/$(terraformVersion)/terraform_$(terraformVersion)_linux_amd64.zip
            unzip -o terraform.zip
            chmod +x terraform
            mkdir -p $HOME/bin
            mv terraform $HOME/bin/terraform
            rm terraform.zip
            echo "âœ… Installed: $HOME/bin/terraform"
            $HOME/bin/terraform -version
          displayName: "Install Terraform CLI"

# 2. Terraform Init
- stage: TerraformInit
  displayName: "Terraform Init"
  dependsOn: InstallTerraform
  jobs:
    - job: Init
      steps:
        - checkout: self
        - bash: |
            set -e
            echo "Running terraform init..."
            cd $(terraform_folder)
            $HOME/bin/terraform init
          displayName: "terraform init"

# 3. Terraform Plan
- stage: TerraformPlan
  displayName: "Terraform Plan"
  dependsOn: TerraformInit
  jobs:
    - job: Plan
      steps:
        - checkout: self
        - bash: |
            set -e
            echo "Running terraform plan..."
            cd $(terraform_folder)
            $HOME/bin/terraform plan \
              -var="location=$(location)" \
              -var="resource_group_name=$(resource_group)" \
              -var="vm_name=$(vm_name)" \
              -var="ssh_public_key=$(ssh_public_key)"
          displayName: "terraform plan"

# 4. Terraform Apply
- stage: TerraformApply
  displayName: "Terraform Apply"
  dependsOn: TerraformPlan
  condition: succeeded()
  jobs:
    - job: Apply
      steps:
        - checkout: self
        - bash: |
            set -e
            echo "Running terraform apply..."
            cd $(terraform_folder)
            $HOME/bin/terraform apply -auto-approve \
              -var="location=$(location)" \
              -var="resource_group_name=$(resource_group)" \
              -var="vm_name=$(vm_name)" \
              -var="ssh_public_key=$(ssh_public_key)"
          displayName: "terraform apply"

# 5. Configure NGINX via Ansible
- stage: ConfigureNginx
  displayName: "Configure NGINX via Ansible"
  dependsOn: TerraformApply
  condition: succeeded()
  jobs:
    - job: Ansible
      steps:
        - checkout: self
        - bash: |
            set -e
            echo "Installing Ansible..."
            sudo apt-get update
            sudo apt-get install -y ansible
            ansible --version
          displayName: "Install Ansible"
        - bash: |
            set -e
            echo "Running NGINX playbook..."
            cd $(ansible_folder)
            ansible-playbook -i inventory site.yml
          displayName: "Run NGINX Playbook"

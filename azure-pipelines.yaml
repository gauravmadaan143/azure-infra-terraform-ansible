trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: Terraform-SP-Creds   # Contains ARM_CLIENT_ID, ARM_CLIENT_SECRET, ARM_SUBSCRIPTION_ID, ARM_TENANT_ID
- name: terraformVersion
  value: '1.6.6'
- name: terraform_folder
  value: 'terraform'
- name: ansible_folder
  value: 'ansible'
- name: location
  value: 'westeurope'
- name: resource_group_name
  value: 'demo-rg'
- name: vm_name
  value: 'demo-vm'
- name: my_ip_address
  value: '89.64.12.157/32'     # Your laptop IP for NSG SSH rule

# SSH_PRIVATE_KEY should be stored as a secret pipeline variable in this group or separately

jobs:
- job: DeployInfra
  displayName: "Terraform + Ansible Deployment"
  steps:
    - checkout: self

    - task: TerraformInstaller@1
      displayName: "Install Terraform"
      inputs:
        terraformVersion: "$(terraformVersion)"

    - task: Bash@3
      displayName: "Terraform Init"
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
      inputs:
        targetType: inline
        script: |
          cd $(terraform_folder)
          terraform init

    - task: Bash@3
      displayName: "Terraform Plan"
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
      inputs:
        targetType: inline
        script: |
          cd $(terraform_folder)
          terraform plan \
            -var="location=$(location)" \
            -var="resource_group_name=$(resource_group_name)" \
            -var="vm_name=$(vm_name)" \
            -var="ssh_public_key=$(ssh_public_key)" \
            -var="my_ip_address=$(my_ip_address)" \
            -var="client_id=$(ARM_CLIENT_ID)" \
            -var="client_secret=$(ARM_CLIENT_SECRET)" \
            -var="subscription_id=$(ARM_SUBSCRIPTION_ID)" \
            -var="tenant_id=$(ARM_TENANT_ID)"

    - task: Bash@3
      displayName: "Terraform Apply"
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
      inputs:
        targetType: inline
        script: |
          cd $(terraform_folder)
          terraform apply -auto-approve \
            -var="location=$(location)" \
            -var="resource_group_name=$(resource_group_name)" \
            -var="vm_name=$(vm_name)" \
            -var="ssh_public_key=$(ssh_public_key)" \
            -var="my_ip_address=$(my_ip_address)" \
            -var="client_id=$(ARM_CLIENT_ID)" \
            -var="client_secret=$(ARM_CLIENT_SECRET)" \
            -var="subscription_id=$(ARM_SUBSCRIPTION_ID)" \
            -var="tenant_id=$(ARM_TENANT_ID)"

    - task: Bash@3
      displayName: 'Get VM public IP and prepare Ansible inventory'
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
      inputs:
        targetType: 'inline'
        script: |
          cd $(Build.SourcesDirectory)/$(terraform_folder)
          VM_PUBLIC_IP=$(terraform output -raw vm_public_ip)

          if [ -z "$VM_PUBLIC_IP" ]; then
            echo "❌ ERROR: VM public IP is empty."
            exit 1
          fi

          echo "✅ VM Public IP is $VM_PUBLIC_IP"

          mkdir -p $(Build.SourcesDirectory)/$(ansible_folder)

          INVENTORY_FILE="$(Build.SourcesDirectory)/$(ansible_folder)/inventory"

          echo "[linux_servers]" > $INVENTORY_FILE
          echo "demo-vm ansible_host=$VM_PUBLIC_IP ansible_user=azureuser ansible_ssh_private_key_file=~/.ssh/id_rsa" >> $INVENTORY_FILE

          echo "📋 Inventory content:"
          cat $INVENTORY_FILE

    - task: Bash@3
      displayName: 'Install Ansible on agent'
      inputs:
        targetType: 'inline'
        script: |
          sudo apt-get update
          sudo apt-get install -y ansible
          ansible --version
          
              - task: Bash@3
                displayName: 'Setup SSH private key for Ansible'
                env:
                  SSH_PRIVATE_KEY: $(SSH_PRIVATE_KEY)   # Make sure this is declared in pipeline variables as secret
                inputs:
                  targetType: 'inline'
                  script: |
                    mkdir -p ~/.ssh
                    cat <<EOF > ~/.ssh/id_rsa
              $(SSH_PRIVATE_KEY)
              EOF
                    chmod 600 ~/.ssh/id_rsa
                    ls -l ~/.ssh/id_rsa

              - task: Bash@3
                displayName: 'Run Ansible Playbook'
                inputs:
                  targetType: 'inline'
                  script: |
                    cd $(Build.SourcesDirectory)/$(ansible_folder)
                    ansible-playbook -i inventory playbook.yml
